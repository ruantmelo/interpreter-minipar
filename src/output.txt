Builded parser
Source:  /home/ruantmelo/Documents/UFAL/Compilers/projeto-minipar/src/interpreter/../../examples/test4.mp
id/reserved:  LexToken(ID,'SEQ',1,0) SEQ_BLOCK
id/reserved:  LexToken(ID,'int',2,8) INT
id/reserved:  LexToken(ID,'n',2,12) ID
id/reserved:  LexToken(ID,'n',3,18) ID
id/reserved:  LexToken(ID,'int',5,29) INT
factor carai  5
id/reserved:  LexToken(ID,'value',5,33) ID
id/reserved:  LexToken(ID,'value',6,43) ID
id/reserved:  LexToken(ID,'int',8,58) INT
factor carai  1
id/reserved:  LexToken(ID,'i',8,62) ID
id/reserved:  LexToken(ID,'i',9,68) ID
id/reserved:  LexToken(ID,'while',10,78) WHILE
factor carai  1
id/reserved:  LexToken(ID,'i',10,84) ID
factor carai  i
id/reserved:  LexToken(ID,'n',10,89) ID
factor carai  n
id/reserved:  LexToken(ID,'value',11,102) ID
id/reserved:  LexToken(ID,'value',11,110) ID
factor carai  value
id/reserved:  LexToken(ID,'i',11,118) ID
id/reserved:  LexToken(ID,'i',12,128) ID
factor carai  i
id/reserved:  LexToken(ID,'i',12,132) ID
factor carai  i
factor carai  1
id/reserved:  LexToken(ID,'output',15,149) OUTPUT
id/reserved:  LexToken(ID,'value',15,156) ID
factor carai  value
('seqBlock', (((((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i')), ('assign', 'i', 1)), ('while', ('condition', ('ID', 'i'), '<=', ('ID', 'n')), (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))))), ('output', ('ID', 'value'))))
executing ('seqBlock', (((((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i')), ('assign', 'i', 1)), ('while', ('condition', ('ID', 'i'), '<=', ('ID', 'n')), (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))))), ('output', ('ID', 'value'))))
executing ((((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i')), ('assign', 'i', 1)), ('while', ('condition', ('ID', 'i'), '<=', ('ID', 'n')), (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))))
complex ((((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i')), ('assign', 'i', 1)), ('while', ('condition', ('ID', 'i'), '<=', ('ID', 'n')), (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))))
executing (((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i')), ('assign', 'i', 1))
complex (((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i')), ('assign', 'i', 1))
executing ((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i'))
complex ((((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1)), ('declaration', 'int', 'i'))
executing (((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1))
complex (((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value')), ('assign', 'value', 1))
executing ((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value'))
complex ((('declaration', 'int', 'n'), ('assign', 'n', 5)), ('declaration', 'int', 'value'))
executing (('declaration', 'int', 'n'), ('assign', 'n', 5))
complex (('declaration', 'int', 'n'), ('assign', 'n', 5))
executing ('declaration', 'int', 'n')
declaration ('declaration', 'int', 'n')
value None
executing ('assign', 'n', 5)
assign ('assign', 'n', 5)
executing ('declaration', 'int', 'value')
declaration ('declaration', 'int', 'value')
value None
executing ('assign', 'value', 1)
assign ('assign', 'value', 1)
executing ('declaration', 'int', 'i')
declaration ('declaration', 'int', 'i')
value None
executing ('assign', 'i', 1)
assign ('assign', 'i', 1)
executing ('while', ('condition', ('ID', 'i'), '<=', ('ID', 'n')), (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))))
executing ('ID', 'i')
gettind id i ('int', 1)
executing ('ID', 'n')
gettind id n ('int', 5)
values  1 5
executing (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
complex (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
executing ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
assign ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
executing ('term', ('ID', 'value'), '*', ('ID', 'i'))
executing ('ID', 'value')
gettind id value ('int', 1)
executing ('ID', 'i')
gettind id i ('int', 1)
executing ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
assign ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
executing ('expr', ('ID', 'i'), '+', 1)
executing expr  ('expr', ('ID', 'i'), '+', 1)
TUPLAZINHA ('expr', ('ID', 'i'), '+', 1)
executing ('ID', 'i')
gettind id i ('int', 1)
tup values  1 1
executing ('ID', 'i')
gettind id i ('int', 2)
executing ('ID', 'n')
gettind id n ('int', 5)
values  2 5
executing (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
complex (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
executing ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
assign ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
executing ('term', ('ID', 'value'), '*', ('ID', 'i'))
executing ('ID', 'value')
gettind id value ('int', 1)
executing ('ID', 'i')
gettind id i ('int', 2)
executing ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
assign ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
executing ('expr', ('ID', 'i'), '+', 1)
executing expr  ('expr', ('ID', 'i'), '+', 1)
TUPLAZINHA ('expr', ('ID', 'i'), '+', 1)
executing ('ID', 'i')
gettind id i ('int', 2)
tup values  2 1
executing ('ID', 'i')
gettind id i ('int', 3)
executing ('ID', 'n')
gettind id n ('int', 5)
values  3 5
executing (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
complex (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
executing ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
assign ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
executing ('term', ('ID', 'value'), '*', ('ID', 'i'))
executing ('ID', 'value')
gettind id value ('int', 2)
executing ('ID', 'i')
gettind id i ('int', 3)
executing ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
assign ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
executing ('expr', ('ID', 'i'), '+', 1)
executing expr  ('expr', ('ID', 'i'), '+', 1)
TUPLAZINHA ('expr', ('ID', 'i'), '+', 1)
executing ('ID', 'i')
gettind id i ('int', 3)
tup values  3 1
executing ('ID', 'i')
gettind id i ('int', 4)
executing ('ID', 'n')
gettind id n ('int', 5)
values  4 5
executing (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
complex (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
executing ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
assign ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
executing ('term', ('ID', 'value'), '*', ('ID', 'i'))
executing ('ID', 'value')
gettind id value ('int', 6)
executing ('ID', 'i')
gettind id i ('int', 4)
executing ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
assign ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
executing ('expr', ('ID', 'i'), '+', 1)
executing expr  ('expr', ('ID', 'i'), '+', 1)
TUPLAZINHA ('expr', ('ID', 'i'), '+', 1)
executing ('ID', 'i')
gettind id i ('int', 4)
tup values  4 1
executing ('ID', 'i')
gettind id i ('int', 5)
executing ('ID', 'n')
gettind id n ('int', 5)
values  5 5
executing (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
complex (('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i'))), ('assign', 'i', ('expr', ('ID', 'i'), '+', 1)))
executing ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
assign ('assign', 'value', ('term', ('ID', 'value'), '*', ('ID', 'i')))
executing ('term', ('ID', 'value'), '*', ('ID', 'i'))
executing ('ID', 'value')
gettind id value ('int', 24)
executing ('ID', 'i')
gettind id i ('int', 5)
executing ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
assign ('assign', 'i', ('expr', ('ID', 'i'), '+', 1))
executing ('expr', ('ID', 'i'), '+', 1)
executing expr  ('expr', ('ID', 'i'), '+', 1)
TUPLAZINHA ('expr', ('ID', 'i'), '+', 1)
executing ('ID', 'i')
gettind id i ('int', 5)
tup values  5 1
executing ('ID', 'i')
gettind id i ('int', 6)
executing ('ID', 'n')
gettind id n ('int', 5)
values  6 5
executing ('output', ('ID', 'value'))
executing ('ID', 'value')
gettind id value ('int', 120)
=============== output:  120
