Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> stmt_block
Rule 1     stmt_block -> seq_stmts
Rule 2     stmt_block -> par_stmts
Rule 3     stmt_block -> stmt_block seq_stmts
Rule 4     stmt_block -> stmt_block par_stmts
Rule 5     seq_stmts -> SEQ_BLOCK stmts
Rule 6     par_stmts -> PAR_BLOCK stmts
Rule 7     stmts -> stmt
Rule 8     stmts -> stmts stmt
Rule 9     stmt -> assignment
Rule 10    stmt -> declaration
Rule 11    stmt -> IF LPAREN condition RPAREN stmt
Rule 12    stmt -> IF LPAREN condition RPAREN stmt ELSE stmt
Rule 13    stmt -> WHILE LPAREN condition RPAREN stmt
Rule 14    stmt -> LBRACE stmts RBRACE
Rule 15    stmt -> func
Rule 16    func -> INPUT LPAREN RPAREN
Rule 17    func -> OUTPUT LPAREN expr RPAREN
Rule 18    func -> chan
Rule 19    chan -> ID DOT send_stmt
Rule 20    chan -> ID DOT receive_stmt
Rule 21    send_stmt -> SEND LPAREN expr RPAREN
Rule 22    send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN
Rule 23    receive_stmt -> RECEIVE LPAREN ID RPAREN
Rule 24    receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN
Rule 25    declaration -> c_channel
Rule 26    declaration -> b_declaration
Rule 27    declaration -> s_declaration
Rule 28    declaration -> i_declaration
Rule 29    condition -> condition LE_THAN expr
Rule 30    condition -> condition GE_THAN expr
Rule 31    condition -> condition L_THAN expr
Rule 32    condition -> condition G_THAN expr
Rule 33    condition -> condition EQUAL expr
Rule 34    condition -> condition NOT_EQUAL expr
Rule 35    condition -> expr
Rule 36    assignment -> ID ASSIGN expr
Rule 37    assignment -> ID ASSIGN func
Rule 38    expr -> expr PLUS term
Rule 39    expr -> expr MINUS term
Rule 40    expr -> term
Rule 41    term -> term TIMES factor
Rule 42    term -> term DIVIDE factor
Rule 43    term -> factor
Rule 44    factor -> LPAREN expr RPAREN
Rule 45    factor -> DIGIT
Rule 46    factor -> ID
Rule 47    factor -> STRING_VALUE
Rule 48    factor -> bool_val
Rule 49    bool_val -> TRUE
Rule 50    bool_val -> FALSE
Rule 51    empty -> <empty>
Rule 52    c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN
Rule 53    address -> ID
Rule 54    address -> STRING_VALUE
Rule 55    b_declaration -> BOOL ID
Rule 56    s_declaration -> STRING ID
Rule 57    i_declaration -> INT ID

Terminals, with rules where they appear

ASSIGN               : 36 37
BOOL                 : 55
CHANNEL              : 52
COMMA                : 22 22 24 24 52
DIGIT                : 45
DIVIDE               : 42
DOT                  : 19 20
ELSE                 : 12
EQUAL                : 33
FALSE                : 50
GE_THAN              : 30
G_THAN               : 32
ID                   : 19 20 23 24 24 24 36 37 46 52 53 55 56 57
IF                   : 11 12
INPUT                : 16
INT                  : 57
LBRACE               : 14
LE_THAN              : 29
LPAREN               : 11 12 13 16 17 21 22 23 24 44 52
L_THAN               : 31
MINUS                : 39
NOT_EQUAL            : 34
OUTPUT               : 17
PAR_BLOCK            : 6
PLUS                 : 38
RBRACE               : 14
RECEIVE              : 23 24
RPAREN               : 11 12 13 16 17 21 22 23 24 44 52
SEND                 : 21 22
SEQ_BLOCK            : 5
STRING               : 56
STRING_VALUE         : 47 54
TIMES                : 41
TRUE                 : 49
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

address              : 52 52
assignment           : 9
b_declaration        : 26
bool_val             : 48
c_channel            : 25
chan                 : 18
condition            : 11 12 13 29 30 31 32 33 34
declaration          : 10
empty                : 
expr                 : 17 21 22 22 22 29 30 31 32 33 34 35 36 38 39 44
factor               : 41 42 43
func                 : 15 37
i_declaration        : 28
par_stmts            : 2 4
receive_stmt         : 20
s_declaration        : 27
send_stmt            : 19
seq_stmts            : 1 3
stmt                 : 7 8 11 12 12 13
stmt_block           : 3 4 0
stmts                : 5 6 8 14
term                 : 38 39 40 41 42

Parsing method: LALR

state 0

    (0) S' -> . stmt_block
    (1) stmt_block -> . seq_stmts
    (2) stmt_block -> . par_stmts
    (3) stmt_block -> . stmt_block seq_stmts
    (4) stmt_block -> . stmt_block par_stmts
    (5) seq_stmts -> . SEQ_BLOCK stmts
    (6) par_stmts -> . PAR_BLOCK stmts

    SEQ_BLOCK       shift and go to state 4
    PAR_BLOCK       shift and go to state 5

    stmt_block                     shift and go to state 1
    seq_stmts                      shift and go to state 2
    par_stmts                      shift and go to state 3

state 1

    (0) S' -> stmt_block .
    (3) stmt_block -> stmt_block . seq_stmts
    (4) stmt_block -> stmt_block . par_stmts
    (5) seq_stmts -> . SEQ_BLOCK stmts
    (6) par_stmts -> . PAR_BLOCK stmts

    SEQ_BLOCK       shift and go to state 4
    PAR_BLOCK       shift and go to state 5

    seq_stmts                      shift and go to state 6
    par_stmts                      shift and go to state 7

state 2

    (1) stmt_block -> seq_stmts .

    SEQ_BLOCK       reduce using rule 1 (stmt_block -> seq_stmts .)
    PAR_BLOCK       reduce using rule 1 (stmt_block -> seq_stmts .)
    $end            reduce using rule 1 (stmt_block -> seq_stmts .)


state 3

    (2) stmt_block -> par_stmts .

    SEQ_BLOCK       reduce using rule 2 (stmt_block -> par_stmts .)
    PAR_BLOCK       reduce using rule 2 (stmt_block -> par_stmts .)
    $end            reduce using rule 2 (stmt_block -> par_stmts .)


state 4

    (5) seq_stmts -> SEQ_BLOCK . stmts
    (7) stmts -> . stmt
    (8) stmts -> . stmts stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmts                          shift and go to state 8
    stmt                           shift and go to state 9
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 5

    (6) par_stmts -> PAR_BLOCK . stmts
    (7) stmts -> . stmt
    (8) stmts -> . stmts stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmts                          shift and go to state 28
    stmt                           shift and go to state 9
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 6

    (3) stmt_block -> stmt_block seq_stmts .

    SEQ_BLOCK       reduce using rule 3 (stmt_block -> stmt_block seq_stmts .)
    PAR_BLOCK       reduce using rule 3 (stmt_block -> stmt_block seq_stmts .)
    $end            reduce using rule 3 (stmt_block -> stmt_block seq_stmts .)


state 7

    (4) stmt_block -> stmt_block par_stmts .

    SEQ_BLOCK       reduce using rule 4 (stmt_block -> stmt_block par_stmts .)
    PAR_BLOCK       reduce using rule 4 (stmt_block -> stmt_block par_stmts .)
    $end            reduce using rule 4 (stmt_block -> stmt_block par_stmts .)


state 8

    (5) seq_stmts -> SEQ_BLOCK stmts .
    (8) stmts -> stmts . stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    SEQ_BLOCK       reduce using rule 5 (seq_stmts -> SEQ_BLOCK stmts .)
    PAR_BLOCK       reduce using rule 5 (seq_stmts -> SEQ_BLOCK stmts .)
    $end            reduce using rule 5 (seq_stmts -> SEQ_BLOCK stmts .)
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmt                           shift and go to state 29
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 9

    (7) stmts -> stmt .

    IF              reduce using rule 7 (stmts -> stmt .)
    WHILE           reduce using rule 7 (stmts -> stmt .)
    LBRACE          reduce using rule 7 (stmts -> stmt .)
    ID              reduce using rule 7 (stmts -> stmt .)
    INPUT           reduce using rule 7 (stmts -> stmt .)
    OUTPUT          reduce using rule 7 (stmts -> stmt .)
    CHANNEL         reduce using rule 7 (stmts -> stmt .)
    BOOL            reduce using rule 7 (stmts -> stmt .)
    STRING          reduce using rule 7 (stmts -> stmt .)
    INT             reduce using rule 7 (stmts -> stmt .)
    SEQ_BLOCK       reduce using rule 7 (stmts -> stmt .)
    PAR_BLOCK       reduce using rule 7 (stmts -> stmt .)
    $end            reduce using rule 7 (stmts -> stmt .)
    RBRACE          reduce using rule 7 (stmts -> stmt .)


state 10

    (9) stmt -> assignment .

    IF              reduce using rule 9 (stmt -> assignment .)
    WHILE           reduce using rule 9 (stmt -> assignment .)
    LBRACE          reduce using rule 9 (stmt -> assignment .)
    ID              reduce using rule 9 (stmt -> assignment .)
    INPUT           reduce using rule 9 (stmt -> assignment .)
    OUTPUT          reduce using rule 9 (stmt -> assignment .)
    CHANNEL         reduce using rule 9 (stmt -> assignment .)
    BOOL            reduce using rule 9 (stmt -> assignment .)
    STRING          reduce using rule 9 (stmt -> assignment .)
    INT             reduce using rule 9 (stmt -> assignment .)
    SEQ_BLOCK       reduce using rule 9 (stmt -> assignment .)
    PAR_BLOCK       reduce using rule 9 (stmt -> assignment .)
    $end            reduce using rule 9 (stmt -> assignment .)
    RBRACE          reduce using rule 9 (stmt -> assignment .)
    ELSE            reduce using rule 9 (stmt -> assignment .)


state 11

    (10) stmt -> declaration .

    IF              reduce using rule 10 (stmt -> declaration .)
    WHILE           reduce using rule 10 (stmt -> declaration .)
    LBRACE          reduce using rule 10 (stmt -> declaration .)
    ID              reduce using rule 10 (stmt -> declaration .)
    INPUT           reduce using rule 10 (stmt -> declaration .)
    OUTPUT          reduce using rule 10 (stmt -> declaration .)
    CHANNEL         reduce using rule 10 (stmt -> declaration .)
    BOOL            reduce using rule 10 (stmt -> declaration .)
    STRING          reduce using rule 10 (stmt -> declaration .)
    INT             reduce using rule 10 (stmt -> declaration .)
    SEQ_BLOCK       reduce using rule 10 (stmt -> declaration .)
    PAR_BLOCK       reduce using rule 10 (stmt -> declaration .)
    $end            reduce using rule 10 (stmt -> declaration .)
    RBRACE          reduce using rule 10 (stmt -> declaration .)
    ELSE            reduce using rule 10 (stmt -> declaration .)


state 12

    (11) stmt -> IF . LPAREN condition RPAREN stmt
    (12) stmt -> IF . LPAREN condition RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 30


state 13

    (13) stmt -> WHILE . LPAREN condition RPAREN stmt

    LPAREN          shift and go to state 31


state 14

    (14) stmt -> LBRACE . stmts RBRACE
    (7) stmts -> . stmt
    (8) stmts -> . stmts stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmts                          shift and go to state 32
    stmt                           shift and go to state 9
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 15

    (15) stmt -> func .

    IF              reduce using rule 15 (stmt -> func .)
    WHILE           reduce using rule 15 (stmt -> func .)
    LBRACE          reduce using rule 15 (stmt -> func .)
    ID              reduce using rule 15 (stmt -> func .)
    INPUT           reduce using rule 15 (stmt -> func .)
    OUTPUT          reduce using rule 15 (stmt -> func .)
    CHANNEL         reduce using rule 15 (stmt -> func .)
    BOOL            reduce using rule 15 (stmt -> func .)
    STRING          reduce using rule 15 (stmt -> func .)
    INT             reduce using rule 15 (stmt -> func .)
    SEQ_BLOCK       reduce using rule 15 (stmt -> func .)
    PAR_BLOCK       reduce using rule 15 (stmt -> func .)
    $end            reduce using rule 15 (stmt -> func .)
    RBRACE          reduce using rule 15 (stmt -> func .)
    ELSE            reduce using rule 15 (stmt -> func .)


state 16

    (36) assignment -> ID . ASSIGN expr
    (37) assignment -> ID . ASSIGN func
    (19) chan -> ID . DOT send_stmt
    (20) chan -> ID . DOT receive_stmt

    ASSIGN          shift and go to state 33
    DOT             shift and go to state 34


state 17

    (25) declaration -> c_channel .

    IF              reduce using rule 25 (declaration -> c_channel .)
    WHILE           reduce using rule 25 (declaration -> c_channel .)
    LBRACE          reduce using rule 25 (declaration -> c_channel .)
    ID              reduce using rule 25 (declaration -> c_channel .)
    INPUT           reduce using rule 25 (declaration -> c_channel .)
    OUTPUT          reduce using rule 25 (declaration -> c_channel .)
    CHANNEL         reduce using rule 25 (declaration -> c_channel .)
    BOOL            reduce using rule 25 (declaration -> c_channel .)
    STRING          reduce using rule 25 (declaration -> c_channel .)
    INT             reduce using rule 25 (declaration -> c_channel .)
    SEQ_BLOCK       reduce using rule 25 (declaration -> c_channel .)
    PAR_BLOCK       reduce using rule 25 (declaration -> c_channel .)
    $end            reduce using rule 25 (declaration -> c_channel .)
    RBRACE          reduce using rule 25 (declaration -> c_channel .)
    ELSE            reduce using rule 25 (declaration -> c_channel .)


state 18

    (26) declaration -> b_declaration .

    IF              reduce using rule 26 (declaration -> b_declaration .)
    WHILE           reduce using rule 26 (declaration -> b_declaration .)
    LBRACE          reduce using rule 26 (declaration -> b_declaration .)
    ID              reduce using rule 26 (declaration -> b_declaration .)
    INPUT           reduce using rule 26 (declaration -> b_declaration .)
    OUTPUT          reduce using rule 26 (declaration -> b_declaration .)
    CHANNEL         reduce using rule 26 (declaration -> b_declaration .)
    BOOL            reduce using rule 26 (declaration -> b_declaration .)
    STRING          reduce using rule 26 (declaration -> b_declaration .)
    INT             reduce using rule 26 (declaration -> b_declaration .)
    SEQ_BLOCK       reduce using rule 26 (declaration -> b_declaration .)
    PAR_BLOCK       reduce using rule 26 (declaration -> b_declaration .)
    $end            reduce using rule 26 (declaration -> b_declaration .)
    RBRACE          reduce using rule 26 (declaration -> b_declaration .)
    ELSE            reduce using rule 26 (declaration -> b_declaration .)


state 19

    (27) declaration -> s_declaration .

    IF              reduce using rule 27 (declaration -> s_declaration .)
    WHILE           reduce using rule 27 (declaration -> s_declaration .)
    LBRACE          reduce using rule 27 (declaration -> s_declaration .)
    ID              reduce using rule 27 (declaration -> s_declaration .)
    INPUT           reduce using rule 27 (declaration -> s_declaration .)
    OUTPUT          reduce using rule 27 (declaration -> s_declaration .)
    CHANNEL         reduce using rule 27 (declaration -> s_declaration .)
    BOOL            reduce using rule 27 (declaration -> s_declaration .)
    STRING          reduce using rule 27 (declaration -> s_declaration .)
    INT             reduce using rule 27 (declaration -> s_declaration .)
    SEQ_BLOCK       reduce using rule 27 (declaration -> s_declaration .)
    PAR_BLOCK       reduce using rule 27 (declaration -> s_declaration .)
    $end            reduce using rule 27 (declaration -> s_declaration .)
    RBRACE          reduce using rule 27 (declaration -> s_declaration .)
    ELSE            reduce using rule 27 (declaration -> s_declaration .)


state 20

    (28) declaration -> i_declaration .

    IF              reduce using rule 28 (declaration -> i_declaration .)
    WHILE           reduce using rule 28 (declaration -> i_declaration .)
    LBRACE          reduce using rule 28 (declaration -> i_declaration .)
    ID              reduce using rule 28 (declaration -> i_declaration .)
    INPUT           reduce using rule 28 (declaration -> i_declaration .)
    OUTPUT          reduce using rule 28 (declaration -> i_declaration .)
    CHANNEL         reduce using rule 28 (declaration -> i_declaration .)
    BOOL            reduce using rule 28 (declaration -> i_declaration .)
    STRING          reduce using rule 28 (declaration -> i_declaration .)
    INT             reduce using rule 28 (declaration -> i_declaration .)
    SEQ_BLOCK       reduce using rule 28 (declaration -> i_declaration .)
    PAR_BLOCK       reduce using rule 28 (declaration -> i_declaration .)
    $end            reduce using rule 28 (declaration -> i_declaration .)
    RBRACE          reduce using rule 28 (declaration -> i_declaration .)
    ELSE            reduce using rule 28 (declaration -> i_declaration .)


state 21

    (16) func -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 35


state 22

    (17) func -> OUTPUT . LPAREN expr RPAREN

    LPAREN          shift and go to state 36


state 23

    (18) func -> chan .

    IF              reduce using rule 18 (func -> chan .)
    WHILE           reduce using rule 18 (func -> chan .)
    LBRACE          reduce using rule 18 (func -> chan .)
    ID              reduce using rule 18 (func -> chan .)
    INPUT           reduce using rule 18 (func -> chan .)
    OUTPUT          reduce using rule 18 (func -> chan .)
    CHANNEL         reduce using rule 18 (func -> chan .)
    BOOL            reduce using rule 18 (func -> chan .)
    STRING          reduce using rule 18 (func -> chan .)
    INT             reduce using rule 18 (func -> chan .)
    SEQ_BLOCK       reduce using rule 18 (func -> chan .)
    PAR_BLOCK       reduce using rule 18 (func -> chan .)
    $end            reduce using rule 18 (func -> chan .)
    RBRACE          reduce using rule 18 (func -> chan .)
    ELSE            reduce using rule 18 (func -> chan .)


state 24

    (52) c_channel -> CHANNEL . ID LPAREN address COMMA address RPAREN

    ID              shift and go to state 37


state 25

    (55) b_declaration -> BOOL . ID

    ID              shift and go to state 38


state 26

    (56) s_declaration -> STRING . ID

    ID              shift and go to state 39


state 27

    (57) i_declaration -> INT . ID

    ID              shift and go to state 40


state 28

    (6) par_stmts -> PAR_BLOCK stmts .
    (8) stmts -> stmts . stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    SEQ_BLOCK       reduce using rule 6 (par_stmts -> PAR_BLOCK stmts .)
    PAR_BLOCK       reduce using rule 6 (par_stmts -> PAR_BLOCK stmts .)
    $end            reduce using rule 6 (par_stmts -> PAR_BLOCK stmts .)
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmt                           shift and go to state 29
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 29

    (8) stmts -> stmts stmt .

    IF              reduce using rule 8 (stmts -> stmts stmt .)
    WHILE           reduce using rule 8 (stmts -> stmts stmt .)
    LBRACE          reduce using rule 8 (stmts -> stmts stmt .)
    ID              reduce using rule 8 (stmts -> stmts stmt .)
    INPUT           reduce using rule 8 (stmts -> stmts stmt .)
    OUTPUT          reduce using rule 8 (stmts -> stmts stmt .)
    CHANNEL         reduce using rule 8 (stmts -> stmts stmt .)
    BOOL            reduce using rule 8 (stmts -> stmts stmt .)
    STRING          reduce using rule 8 (stmts -> stmts stmt .)
    INT             reduce using rule 8 (stmts -> stmts stmt .)
    SEQ_BLOCK       reduce using rule 8 (stmts -> stmts stmt .)
    PAR_BLOCK       reduce using rule 8 (stmts -> stmts stmt .)
    $end            reduce using rule 8 (stmts -> stmts stmt .)
    RBRACE          reduce using rule 8 (stmts -> stmts stmt .)


state 30

    (11) stmt -> IF LPAREN . condition RPAREN stmt
    (12) stmt -> IF LPAREN . condition RPAREN stmt ELSE stmt
    (29) condition -> . condition LE_THAN expr
    (30) condition -> . condition GE_THAN expr
    (31) condition -> . condition L_THAN expr
    (32) condition -> . condition G_THAN expr
    (33) condition -> . condition EQUAL expr
    (34) condition -> . condition NOT_EQUAL expr
    (35) condition -> . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    condition                      shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 31

    (13) stmt -> WHILE LPAREN . condition RPAREN stmt
    (29) condition -> . condition LE_THAN expr
    (30) condition -> . condition GE_THAN expr
    (31) condition -> . condition L_THAN expr
    (32) condition -> . condition G_THAN expr
    (33) condition -> . condition EQUAL expr
    (34) condition -> . condition NOT_EQUAL expr
    (35) condition -> . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    condition                      shift and go to state 52
    expr                           shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 32

    (14) stmt -> LBRACE stmts . RBRACE
    (8) stmts -> stmts . stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    RBRACE          shift and go to state 53
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmt                           shift and go to state 29
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 33

    (36) assignment -> ID ASSIGN . expr
    (37) assignment -> ID ASSIGN . func
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    ID              shift and go to state 54
    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 55
    func                           shift and go to state 56
    term                           shift and go to state 44
    chan                           shift and go to state 23
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 34

    (19) chan -> ID DOT . send_stmt
    (20) chan -> ID DOT . receive_stmt
    (21) send_stmt -> . SEND LPAREN expr RPAREN
    (22) send_stmt -> . SEND LPAREN expr COMMA expr COMMA expr RPAREN
    (23) receive_stmt -> . RECEIVE LPAREN ID RPAREN
    (24) receive_stmt -> . RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN

    SEND            shift and go to state 59
    RECEIVE         shift and go to state 60

    send_stmt                      shift and go to state 57
    receive_stmt                   shift and go to state 58

state 35

    (16) func -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 61


state 36

    (17) func -> OUTPUT LPAREN . expr RPAREN
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 62
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 37

    (52) c_channel -> CHANNEL ID . LPAREN address COMMA address RPAREN

    LPAREN          shift and go to state 63


state 38

    (55) b_declaration -> BOOL ID .

    IF              reduce using rule 55 (b_declaration -> BOOL ID .)
    WHILE           reduce using rule 55 (b_declaration -> BOOL ID .)
    LBRACE          reduce using rule 55 (b_declaration -> BOOL ID .)
    ID              reduce using rule 55 (b_declaration -> BOOL ID .)
    INPUT           reduce using rule 55 (b_declaration -> BOOL ID .)
    OUTPUT          reduce using rule 55 (b_declaration -> BOOL ID .)
    CHANNEL         reduce using rule 55 (b_declaration -> BOOL ID .)
    BOOL            reduce using rule 55 (b_declaration -> BOOL ID .)
    STRING          reduce using rule 55 (b_declaration -> BOOL ID .)
    INT             reduce using rule 55 (b_declaration -> BOOL ID .)
    SEQ_BLOCK       reduce using rule 55 (b_declaration -> BOOL ID .)
    PAR_BLOCK       reduce using rule 55 (b_declaration -> BOOL ID .)
    $end            reduce using rule 55 (b_declaration -> BOOL ID .)
    RBRACE          reduce using rule 55 (b_declaration -> BOOL ID .)
    ELSE            reduce using rule 55 (b_declaration -> BOOL ID .)


state 39

    (56) s_declaration -> STRING ID .

    IF              reduce using rule 56 (s_declaration -> STRING ID .)
    WHILE           reduce using rule 56 (s_declaration -> STRING ID .)
    LBRACE          reduce using rule 56 (s_declaration -> STRING ID .)
    ID              reduce using rule 56 (s_declaration -> STRING ID .)
    INPUT           reduce using rule 56 (s_declaration -> STRING ID .)
    OUTPUT          reduce using rule 56 (s_declaration -> STRING ID .)
    CHANNEL         reduce using rule 56 (s_declaration -> STRING ID .)
    BOOL            reduce using rule 56 (s_declaration -> STRING ID .)
    STRING          reduce using rule 56 (s_declaration -> STRING ID .)
    INT             reduce using rule 56 (s_declaration -> STRING ID .)
    SEQ_BLOCK       reduce using rule 56 (s_declaration -> STRING ID .)
    PAR_BLOCK       reduce using rule 56 (s_declaration -> STRING ID .)
    $end            reduce using rule 56 (s_declaration -> STRING ID .)
    RBRACE          reduce using rule 56 (s_declaration -> STRING ID .)
    ELSE            reduce using rule 56 (s_declaration -> STRING ID .)


state 40

    (57) i_declaration -> INT ID .

    IF              reduce using rule 57 (i_declaration -> INT ID .)
    WHILE           reduce using rule 57 (i_declaration -> INT ID .)
    LBRACE          reduce using rule 57 (i_declaration -> INT ID .)
    ID              reduce using rule 57 (i_declaration -> INT ID .)
    INPUT           reduce using rule 57 (i_declaration -> INT ID .)
    OUTPUT          reduce using rule 57 (i_declaration -> INT ID .)
    CHANNEL         reduce using rule 57 (i_declaration -> INT ID .)
    BOOL            reduce using rule 57 (i_declaration -> INT ID .)
    STRING          reduce using rule 57 (i_declaration -> INT ID .)
    INT             reduce using rule 57 (i_declaration -> INT ID .)
    SEQ_BLOCK       reduce using rule 57 (i_declaration -> INT ID .)
    PAR_BLOCK       reduce using rule 57 (i_declaration -> INT ID .)
    $end            reduce using rule 57 (i_declaration -> INT ID .)
    RBRACE          reduce using rule 57 (i_declaration -> INT ID .)
    ELSE            reduce using rule 57 (i_declaration -> INT ID .)


state 41

    (44) factor -> LPAREN . expr RPAREN
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 64
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 42

    (11) stmt -> IF LPAREN condition . RPAREN stmt
    (12) stmt -> IF LPAREN condition . RPAREN stmt ELSE stmt
    (29) condition -> condition . LE_THAN expr
    (30) condition -> condition . GE_THAN expr
    (31) condition -> condition . L_THAN expr
    (32) condition -> condition . G_THAN expr
    (33) condition -> condition . EQUAL expr
    (34) condition -> condition . NOT_EQUAL expr

    RPAREN          shift and go to state 65
    LE_THAN         shift and go to state 66
    GE_THAN         shift and go to state 67
    L_THAN          shift and go to state 68
    G_THAN          shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71


state 43

    (35) condition -> expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 35 (condition -> expr .)
    LE_THAN         reduce using rule 35 (condition -> expr .)
    GE_THAN         reduce using rule 35 (condition -> expr .)
    L_THAN          reduce using rule 35 (condition -> expr .)
    G_THAN          reduce using rule 35 (condition -> expr .)
    EQUAL           reduce using rule 35 (condition -> expr .)
    NOT_EQUAL       reduce using rule 35 (condition -> expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 44

    (40) expr -> term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 40 (expr -> term .)
    MINUS           reduce using rule 40 (expr -> term .)
    RPAREN          reduce using rule 40 (expr -> term .)
    LE_THAN         reduce using rule 40 (expr -> term .)
    GE_THAN         reduce using rule 40 (expr -> term .)
    L_THAN          reduce using rule 40 (expr -> term .)
    G_THAN          reduce using rule 40 (expr -> term .)
    EQUAL           reduce using rule 40 (expr -> term .)
    NOT_EQUAL       reduce using rule 40 (expr -> term .)
    IF              reduce using rule 40 (expr -> term .)
    WHILE           reduce using rule 40 (expr -> term .)
    LBRACE          reduce using rule 40 (expr -> term .)
    ID              reduce using rule 40 (expr -> term .)
    INPUT           reduce using rule 40 (expr -> term .)
    OUTPUT          reduce using rule 40 (expr -> term .)
    CHANNEL         reduce using rule 40 (expr -> term .)
    BOOL            reduce using rule 40 (expr -> term .)
    STRING          reduce using rule 40 (expr -> term .)
    INT             reduce using rule 40 (expr -> term .)
    SEQ_BLOCK       reduce using rule 40 (expr -> term .)
    PAR_BLOCK       reduce using rule 40 (expr -> term .)
    $end            reduce using rule 40 (expr -> term .)
    RBRACE          reduce using rule 40 (expr -> term .)
    ELSE            reduce using rule 40 (expr -> term .)
    COMMA           reduce using rule 40 (expr -> term .)
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75


state 45

    (43) term -> factor .

    TIMES           reduce using rule 43 (term -> factor .)
    DIVIDE          reduce using rule 43 (term -> factor .)
    PLUS            reduce using rule 43 (term -> factor .)
    MINUS           reduce using rule 43 (term -> factor .)
    RPAREN          reduce using rule 43 (term -> factor .)
    LE_THAN         reduce using rule 43 (term -> factor .)
    GE_THAN         reduce using rule 43 (term -> factor .)
    L_THAN          reduce using rule 43 (term -> factor .)
    G_THAN          reduce using rule 43 (term -> factor .)
    EQUAL           reduce using rule 43 (term -> factor .)
    NOT_EQUAL       reduce using rule 43 (term -> factor .)
    IF              reduce using rule 43 (term -> factor .)
    WHILE           reduce using rule 43 (term -> factor .)
    LBRACE          reduce using rule 43 (term -> factor .)
    ID              reduce using rule 43 (term -> factor .)
    INPUT           reduce using rule 43 (term -> factor .)
    OUTPUT          reduce using rule 43 (term -> factor .)
    CHANNEL         reduce using rule 43 (term -> factor .)
    BOOL            reduce using rule 43 (term -> factor .)
    STRING          reduce using rule 43 (term -> factor .)
    INT             reduce using rule 43 (term -> factor .)
    SEQ_BLOCK       reduce using rule 43 (term -> factor .)
    PAR_BLOCK       reduce using rule 43 (term -> factor .)
    $end            reduce using rule 43 (term -> factor .)
    RBRACE          reduce using rule 43 (term -> factor .)
    ELSE            reduce using rule 43 (term -> factor .)
    COMMA           reduce using rule 43 (term -> factor .)


state 46

    (45) factor -> DIGIT .

    TIMES           reduce using rule 45 (factor -> DIGIT .)
    DIVIDE          reduce using rule 45 (factor -> DIGIT .)
    PLUS            reduce using rule 45 (factor -> DIGIT .)
    MINUS           reduce using rule 45 (factor -> DIGIT .)
    RPAREN          reduce using rule 45 (factor -> DIGIT .)
    LE_THAN         reduce using rule 45 (factor -> DIGIT .)
    GE_THAN         reduce using rule 45 (factor -> DIGIT .)
    L_THAN          reduce using rule 45 (factor -> DIGIT .)
    G_THAN          reduce using rule 45 (factor -> DIGIT .)
    EQUAL           reduce using rule 45 (factor -> DIGIT .)
    NOT_EQUAL       reduce using rule 45 (factor -> DIGIT .)
    IF              reduce using rule 45 (factor -> DIGIT .)
    WHILE           reduce using rule 45 (factor -> DIGIT .)
    LBRACE          reduce using rule 45 (factor -> DIGIT .)
    ID              reduce using rule 45 (factor -> DIGIT .)
    INPUT           reduce using rule 45 (factor -> DIGIT .)
    OUTPUT          reduce using rule 45 (factor -> DIGIT .)
    CHANNEL         reduce using rule 45 (factor -> DIGIT .)
    BOOL            reduce using rule 45 (factor -> DIGIT .)
    STRING          reduce using rule 45 (factor -> DIGIT .)
    INT             reduce using rule 45 (factor -> DIGIT .)
    SEQ_BLOCK       reduce using rule 45 (factor -> DIGIT .)
    PAR_BLOCK       reduce using rule 45 (factor -> DIGIT .)
    $end            reduce using rule 45 (factor -> DIGIT .)
    RBRACE          reduce using rule 45 (factor -> DIGIT .)
    ELSE            reduce using rule 45 (factor -> DIGIT .)
    COMMA           reduce using rule 45 (factor -> DIGIT .)


state 47

    (46) factor -> ID .

    TIMES           reduce using rule 46 (factor -> ID .)
    DIVIDE          reduce using rule 46 (factor -> ID .)
    PLUS            reduce using rule 46 (factor -> ID .)
    MINUS           reduce using rule 46 (factor -> ID .)
    RPAREN          reduce using rule 46 (factor -> ID .)
    LE_THAN         reduce using rule 46 (factor -> ID .)
    GE_THAN         reduce using rule 46 (factor -> ID .)
    L_THAN          reduce using rule 46 (factor -> ID .)
    G_THAN          reduce using rule 46 (factor -> ID .)
    EQUAL           reduce using rule 46 (factor -> ID .)
    NOT_EQUAL       reduce using rule 46 (factor -> ID .)
    IF              reduce using rule 46 (factor -> ID .)
    WHILE           reduce using rule 46 (factor -> ID .)
    LBRACE          reduce using rule 46 (factor -> ID .)
    ID              reduce using rule 46 (factor -> ID .)
    INPUT           reduce using rule 46 (factor -> ID .)
    OUTPUT          reduce using rule 46 (factor -> ID .)
    CHANNEL         reduce using rule 46 (factor -> ID .)
    BOOL            reduce using rule 46 (factor -> ID .)
    STRING          reduce using rule 46 (factor -> ID .)
    INT             reduce using rule 46 (factor -> ID .)
    SEQ_BLOCK       reduce using rule 46 (factor -> ID .)
    PAR_BLOCK       reduce using rule 46 (factor -> ID .)
    $end            reduce using rule 46 (factor -> ID .)
    RBRACE          reduce using rule 46 (factor -> ID .)
    ELSE            reduce using rule 46 (factor -> ID .)
    COMMA           reduce using rule 46 (factor -> ID .)


state 48

    (47) factor -> STRING_VALUE .

    TIMES           reduce using rule 47 (factor -> STRING_VALUE .)
    DIVIDE          reduce using rule 47 (factor -> STRING_VALUE .)
    PLUS            reduce using rule 47 (factor -> STRING_VALUE .)
    MINUS           reduce using rule 47 (factor -> STRING_VALUE .)
    RPAREN          reduce using rule 47 (factor -> STRING_VALUE .)
    LE_THAN         reduce using rule 47 (factor -> STRING_VALUE .)
    GE_THAN         reduce using rule 47 (factor -> STRING_VALUE .)
    L_THAN          reduce using rule 47 (factor -> STRING_VALUE .)
    G_THAN          reduce using rule 47 (factor -> STRING_VALUE .)
    EQUAL           reduce using rule 47 (factor -> STRING_VALUE .)
    NOT_EQUAL       reduce using rule 47 (factor -> STRING_VALUE .)
    IF              reduce using rule 47 (factor -> STRING_VALUE .)
    WHILE           reduce using rule 47 (factor -> STRING_VALUE .)
    LBRACE          reduce using rule 47 (factor -> STRING_VALUE .)
    ID              reduce using rule 47 (factor -> STRING_VALUE .)
    INPUT           reduce using rule 47 (factor -> STRING_VALUE .)
    OUTPUT          reduce using rule 47 (factor -> STRING_VALUE .)
    CHANNEL         reduce using rule 47 (factor -> STRING_VALUE .)
    BOOL            reduce using rule 47 (factor -> STRING_VALUE .)
    STRING          reduce using rule 47 (factor -> STRING_VALUE .)
    INT             reduce using rule 47 (factor -> STRING_VALUE .)
    SEQ_BLOCK       reduce using rule 47 (factor -> STRING_VALUE .)
    PAR_BLOCK       reduce using rule 47 (factor -> STRING_VALUE .)
    $end            reduce using rule 47 (factor -> STRING_VALUE .)
    RBRACE          reduce using rule 47 (factor -> STRING_VALUE .)
    ELSE            reduce using rule 47 (factor -> STRING_VALUE .)
    COMMA           reduce using rule 47 (factor -> STRING_VALUE .)


state 49

    (48) factor -> bool_val .

    TIMES           reduce using rule 48 (factor -> bool_val .)
    DIVIDE          reduce using rule 48 (factor -> bool_val .)
    PLUS            reduce using rule 48 (factor -> bool_val .)
    MINUS           reduce using rule 48 (factor -> bool_val .)
    RPAREN          reduce using rule 48 (factor -> bool_val .)
    LE_THAN         reduce using rule 48 (factor -> bool_val .)
    GE_THAN         reduce using rule 48 (factor -> bool_val .)
    L_THAN          reduce using rule 48 (factor -> bool_val .)
    G_THAN          reduce using rule 48 (factor -> bool_val .)
    EQUAL           reduce using rule 48 (factor -> bool_val .)
    NOT_EQUAL       reduce using rule 48 (factor -> bool_val .)
    IF              reduce using rule 48 (factor -> bool_val .)
    WHILE           reduce using rule 48 (factor -> bool_val .)
    LBRACE          reduce using rule 48 (factor -> bool_val .)
    ID              reduce using rule 48 (factor -> bool_val .)
    INPUT           reduce using rule 48 (factor -> bool_val .)
    OUTPUT          reduce using rule 48 (factor -> bool_val .)
    CHANNEL         reduce using rule 48 (factor -> bool_val .)
    BOOL            reduce using rule 48 (factor -> bool_val .)
    STRING          reduce using rule 48 (factor -> bool_val .)
    INT             reduce using rule 48 (factor -> bool_val .)
    SEQ_BLOCK       reduce using rule 48 (factor -> bool_val .)
    PAR_BLOCK       reduce using rule 48 (factor -> bool_val .)
    $end            reduce using rule 48 (factor -> bool_val .)
    RBRACE          reduce using rule 48 (factor -> bool_val .)
    ELSE            reduce using rule 48 (factor -> bool_val .)
    COMMA           reduce using rule 48 (factor -> bool_val .)


state 50

    (49) bool_val -> TRUE .

    TIMES           reduce using rule 49 (bool_val -> TRUE .)
    DIVIDE          reduce using rule 49 (bool_val -> TRUE .)
    PLUS            reduce using rule 49 (bool_val -> TRUE .)
    MINUS           reduce using rule 49 (bool_val -> TRUE .)
    RPAREN          reduce using rule 49 (bool_val -> TRUE .)
    LE_THAN         reduce using rule 49 (bool_val -> TRUE .)
    GE_THAN         reduce using rule 49 (bool_val -> TRUE .)
    L_THAN          reduce using rule 49 (bool_val -> TRUE .)
    G_THAN          reduce using rule 49 (bool_val -> TRUE .)
    EQUAL           reduce using rule 49 (bool_val -> TRUE .)
    NOT_EQUAL       reduce using rule 49 (bool_val -> TRUE .)
    IF              reduce using rule 49 (bool_val -> TRUE .)
    WHILE           reduce using rule 49 (bool_val -> TRUE .)
    LBRACE          reduce using rule 49 (bool_val -> TRUE .)
    ID              reduce using rule 49 (bool_val -> TRUE .)
    INPUT           reduce using rule 49 (bool_val -> TRUE .)
    OUTPUT          reduce using rule 49 (bool_val -> TRUE .)
    CHANNEL         reduce using rule 49 (bool_val -> TRUE .)
    BOOL            reduce using rule 49 (bool_val -> TRUE .)
    STRING          reduce using rule 49 (bool_val -> TRUE .)
    INT             reduce using rule 49 (bool_val -> TRUE .)
    SEQ_BLOCK       reduce using rule 49 (bool_val -> TRUE .)
    PAR_BLOCK       reduce using rule 49 (bool_val -> TRUE .)
    $end            reduce using rule 49 (bool_val -> TRUE .)
    RBRACE          reduce using rule 49 (bool_val -> TRUE .)
    ELSE            reduce using rule 49 (bool_val -> TRUE .)
    COMMA           reduce using rule 49 (bool_val -> TRUE .)


state 51

    (50) bool_val -> FALSE .

    TIMES           reduce using rule 50 (bool_val -> FALSE .)
    DIVIDE          reduce using rule 50 (bool_val -> FALSE .)
    PLUS            reduce using rule 50 (bool_val -> FALSE .)
    MINUS           reduce using rule 50 (bool_val -> FALSE .)
    RPAREN          reduce using rule 50 (bool_val -> FALSE .)
    LE_THAN         reduce using rule 50 (bool_val -> FALSE .)
    GE_THAN         reduce using rule 50 (bool_val -> FALSE .)
    L_THAN          reduce using rule 50 (bool_val -> FALSE .)
    G_THAN          reduce using rule 50 (bool_val -> FALSE .)
    EQUAL           reduce using rule 50 (bool_val -> FALSE .)
    NOT_EQUAL       reduce using rule 50 (bool_val -> FALSE .)
    IF              reduce using rule 50 (bool_val -> FALSE .)
    WHILE           reduce using rule 50 (bool_val -> FALSE .)
    LBRACE          reduce using rule 50 (bool_val -> FALSE .)
    ID              reduce using rule 50 (bool_val -> FALSE .)
    INPUT           reduce using rule 50 (bool_val -> FALSE .)
    OUTPUT          reduce using rule 50 (bool_val -> FALSE .)
    CHANNEL         reduce using rule 50 (bool_val -> FALSE .)
    BOOL            reduce using rule 50 (bool_val -> FALSE .)
    STRING          reduce using rule 50 (bool_val -> FALSE .)
    INT             reduce using rule 50 (bool_val -> FALSE .)
    SEQ_BLOCK       reduce using rule 50 (bool_val -> FALSE .)
    PAR_BLOCK       reduce using rule 50 (bool_val -> FALSE .)
    $end            reduce using rule 50 (bool_val -> FALSE .)
    RBRACE          reduce using rule 50 (bool_val -> FALSE .)
    ELSE            reduce using rule 50 (bool_val -> FALSE .)
    COMMA           reduce using rule 50 (bool_val -> FALSE .)


state 52

    (13) stmt -> WHILE LPAREN condition . RPAREN stmt
    (29) condition -> condition . LE_THAN expr
    (30) condition -> condition . GE_THAN expr
    (31) condition -> condition . L_THAN expr
    (32) condition -> condition . G_THAN expr
    (33) condition -> condition . EQUAL expr
    (34) condition -> condition . NOT_EQUAL expr

    RPAREN          shift and go to state 76
    LE_THAN         shift and go to state 66
    GE_THAN         shift and go to state 67
    L_THAN          shift and go to state 68
    G_THAN          shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71


state 53

    (14) stmt -> LBRACE stmts RBRACE .

    IF              reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    WHILE           reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    LBRACE          reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    ID              reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    INPUT           reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    OUTPUT          reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    CHANNEL         reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    BOOL            reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    STRING          reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    INT             reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    SEQ_BLOCK       reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    PAR_BLOCK       reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    $end            reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)
    ELSE            reduce using rule 14 (stmt -> LBRACE stmts RBRACE .)


state 54

    (19) chan -> ID . DOT send_stmt
    (20) chan -> ID . DOT receive_stmt
    (46) factor -> ID .

    DOT             shift and go to state 34
    TIMES           reduce using rule 46 (factor -> ID .)
    DIVIDE          reduce using rule 46 (factor -> ID .)
    PLUS            reduce using rule 46 (factor -> ID .)
    MINUS           reduce using rule 46 (factor -> ID .)
    IF              reduce using rule 46 (factor -> ID .)
    WHILE           reduce using rule 46 (factor -> ID .)
    LBRACE          reduce using rule 46 (factor -> ID .)
    ID              reduce using rule 46 (factor -> ID .)
    INPUT           reduce using rule 46 (factor -> ID .)
    OUTPUT          reduce using rule 46 (factor -> ID .)
    CHANNEL         reduce using rule 46 (factor -> ID .)
    BOOL            reduce using rule 46 (factor -> ID .)
    STRING          reduce using rule 46 (factor -> ID .)
    INT             reduce using rule 46 (factor -> ID .)
    SEQ_BLOCK       reduce using rule 46 (factor -> ID .)
    PAR_BLOCK       reduce using rule 46 (factor -> ID .)
    $end            reduce using rule 46 (factor -> ID .)
    RBRACE          reduce using rule 46 (factor -> ID .)
    ELSE            reduce using rule 46 (factor -> ID .)


state 55

    (36) assignment -> ID ASSIGN expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    IF              reduce using rule 36 (assignment -> ID ASSIGN expr .)
    WHILE           reduce using rule 36 (assignment -> ID ASSIGN expr .)
    LBRACE          reduce using rule 36 (assignment -> ID ASSIGN expr .)
    ID              reduce using rule 36 (assignment -> ID ASSIGN expr .)
    INPUT           reduce using rule 36 (assignment -> ID ASSIGN expr .)
    OUTPUT          reduce using rule 36 (assignment -> ID ASSIGN expr .)
    CHANNEL         reduce using rule 36 (assignment -> ID ASSIGN expr .)
    BOOL            reduce using rule 36 (assignment -> ID ASSIGN expr .)
    STRING          reduce using rule 36 (assignment -> ID ASSIGN expr .)
    INT             reduce using rule 36 (assignment -> ID ASSIGN expr .)
    SEQ_BLOCK       reduce using rule 36 (assignment -> ID ASSIGN expr .)
    PAR_BLOCK       reduce using rule 36 (assignment -> ID ASSIGN expr .)
    $end            reduce using rule 36 (assignment -> ID ASSIGN expr .)
    RBRACE          reduce using rule 36 (assignment -> ID ASSIGN expr .)
    ELSE            reduce using rule 36 (assignment -> ID ASSIGN expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 56

    (37) assignment -> ID ASSIGN func .

    IF              reduce using rule 37 (assignment -> ID ASSIGN func .)
    WHILE           reduce using rule 37 (assignment -> ID ASSIGN func .)
    LBRACE          reduce using rule 37 (assignment -> ID ASSIGN func .)
    ID              reduce using rule 37 (assignment -> ID ASSIGN func .)
    INPUT           reduce using rule 37 (assignment -> ID ASSIGN func .)
    OUTPUT          reduce using rule 37 (assignment -> ID ASSIGN func .)
    CHANNEL         reduce using rule 37 (assignment -> ID ASSIGN func .)
    BOOL            reduce using rule 37 (assignment -> ID ASSIGN func .)
    STRING          reduce using rule 37 (assignment -> ID ASSIGN func .)
    INT             reduce using rule 37 (assignment -> ID ASSIGN func .)
    SEQ_BLOCK       reduce using rule 37 (assignment -> ID ASSIGN func .)
    PAR_BLOCK       reduce using rule 37 (assignment -> ID ASSIGN func .)
    $end            reduce using rule 37 (assignment -> ID ASSIGN func .)
    RBRACE          reduce using rule 37 (assignment -> ID ASSIGN func .)
    ELSE            reduce using rule 37 (assignment -> ID ASSIGN func .)


state 57

    (19) chan -> ID DOT send_stmt .

    IF              reduce using rule 19 (chan -> ID DOT send_stmt .)
    WHILE           reduce using rule 19 (chan -> ID DOT send_stmt .)
    LBRACE          reduce using rule 19 (chan -> ID DOT send_stmt .)
    ID              reduce using rule 19 (chan -> ID DOT send_stmt .)
    INPUT           reduce using rule 19 (chan -> ID DOT send_stmt .)
    OUTPUT          reduce using rule 19 (chan -> ID DOT send_stmt .)
    CHANNEL         reduce using rule 19 (chan -> ID DOT send_stmt .)
    BOOL            reduce using rule 19 (chan -> ID DOT send_stmt .)
    STRING          reduce using rule 19 (chan -> ID DOT send_stmt .)
    INT             reduce using rule 19 (chan -> ID DOT send_stmt .)
    SEQ_BLOCK       reduce using rule 19 (chan -> ID DOT send_stmt .)
    PAR_BLOCK       reduce using rule 19 (chan -> ID DOT send_stmt .)
    $end            reduce using rule 19 (chan -> ID DOT send_stmt .)
    RBRACE          reduce using rule 19 (chan -> ID DOT send_stmt .)
    ELSE            reduce using rule 19 (chan -> ID DOT send_stmt .)


state 58

    (20) chan -> ID DOT receive_stmt .

    IF              reduce using rule 20 (chan -> ID DOT receive_stmt .)
    WHILE           reduce using rule 20 (chan -> ID DOT receive_stmt .)
    LBRACE          reduce using rule 20 (chan -> ID DOT receive_stmt .)
    ID              reduce using rule 20 (chan -> ID DOT receive_stmt .)
    INPUT           reduce using rule 20 (chan -> ID DOT receive_stmt .)
    OUTPUT          reduce using rule 20 (chan -> ID DOT receive_stmt .)
    CHANNEL         reduce using rule 20 (chan -> ID DOT receive_stmt .)
    BOOL            reduce using rule 20 (chan -> ID DOT receive_stmt .)
    STRING          reduce using rule 20 (chan -> ID DOT receive_stmt .)
    INT             reduce using rule 20 (chan -> ID DOT receive_stmt .)
    SEQ_BLOCK       reduce using rule 20 (chan -> ID DOT receive_stmt .)
    PAR_BLOCK       reduce using rule 20 (chan -> ID DOT receive_stmt .)
    $end            reduce using rule 20 (chan -> ID DOT receive_stmt .)
    RBRACE          reduce using rule 20 (chan -> ID DOT receive_stmt .)
    ELSE            reduce using rule 20 (chan -> ID DOT receive_stmt .)


state 59

    (21) send_stmt -> SEND . LPAREN expr RPAREN
    (22) send_stmt -> SEND . LPAREN expr COMMA expr COMMA expr RPAREN

    LPAREN          shift and go to state 77


state 60

    (23) receive_stmt -> RECEIVE . LPAREN ID RPAREN
    (24) receive_stmt -> RECEIVE . LPAREN ID COMMA ID COMMA ID RPAREN

    LPAREN          shift and go to state 78


state 61

    (16) func -> INPUT LPAREN RPAREN .

    IF              reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    WHILE           reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    LBRACE          reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    ID              reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    OUTPUT          reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    CHANNEL         reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    BOOL            reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    STRING          reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    INT             reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    SEQ_BLOCK       reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    PAR_BLOCK       reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 16 (func -> INPUT LPAREN RPAREN .)
    ELSE            reduce using rule 16 (func -> INPUT LPAREN RPAREN .)


state 62

    (17) func -> OUTPUT LPAREN expr . RPAREN
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          shift and go to state 79
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 63

    (52) c_channel -> CHANNEL ID LPAREN . address COMMA address RPAREN
    (53) address -> . ID
    (54) address -> . STRING_VALUE

    ID              shift and go to state 80
    STRING_VALUE    shift and go to state 82

    address                        shift and go to state 81

state 64

    (44) factor -> LPAREN expr . RPAREN
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 65

    (11) stmt -> IF LPAREN condition RPAREN . stmt
    (12) stmt -> IF LPAREN condition RPAREN . stmt ELSE stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmt                           shift and go to state 84
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 66

    (29) condition -> condition LE_THAN . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 85
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 67

    (30) condition -> condition GE_THAN . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 86
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 68

    (31) condition -> condition L_THAN . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 87
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 69

    (32) condition -> condition G_THAN . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 88
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 70

    (33) condition -> condition EQUAL . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 89
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 71

    (34) condition -> condition NOT_EQUAL . expr
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 90
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 72

    (38) expr -> expr PLUS . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    term                           shift and go to state 91
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 73

    (39) expr -> expr MINUS . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    term                           shift and go to state 92
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 74

    (41) term -> term TIMES . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    factor                         shift and go to state 93
    bool_val                       shift and go to state 49

state 75

    (42) term -> term DIVIDE . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    factor                         shift and go to state 94
    bool_val                       shift and go to state 49

state 76

    (13) stmt -> WHILE LPAREN condition RPAREN . stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmt                           shift and go to state 95
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 77

    (21) send_stmt -> SEND LPAREN . expr RPAREN
    (22) send_stmt -> SEND LPAREN . expr COMMA expr COMMA expr RPAREN
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 96
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 78

    (23) receive_stmt -> RECEIVE LPAREN . ID RPAREN
    (24) receive_stmt -> RECEIVE LPAREN . ID COMMA ID COMMA ID RPAREN

    ID              shift and go to state 97


state 79

    (17) func -> OUTPUT LPAREN expr RPAREN .

    IF              reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    WHILE           reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    LBRACE          reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    ID              reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    INPUT           reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    OUTPUT          reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    CHANNEL         reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    BOOL            reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    STRING          reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    INT             reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    SEQ_BLOCK       reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    PAR_BLOCK       reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    $end            reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    RBRACE          reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)
    ELSE            reduce using rule 17 (func -> OUTPUT LPAREN expr RPAREN .)


state 80

    (53) address -> ID .

    COMMA           reduce using rule 53 (address -> ID .)
    RPAREN          reduce using rule 53 (address -> ID .)


state 81

    (52) c_channel -> CHANNEL ID LPAREN address . COMMA address RPAREN

    COMMA           shift and go to state 98


state 82

    (54) address -> STRING_VALUE .

    COMMA           reduce using rule 54 (address -> STRING_VALUE .)
    RPAREN          reduce using rule 54 (address -> STRING_VALUE .)


state 83

    (44) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    LE_THAN         reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    GE_THAN         reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    L_THAN          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    G_THAN          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    IF              reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    ID              reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    INPUT           reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    OUTPUT          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    CHANNEL         reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    BOOL            reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    STRING          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    INT             reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    SEQ_BLOCK       reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    PAR_BLOCK       reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 44 (factor -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 44 (factor -> LPAREN expr RPAREN .)


state 84

    (11) stmt -> IF LPAREN condition RPAREN stmt .
    (12) stmt -> IF LPAREN condition RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    WHILE           reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    LBRACE          reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    ID              reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    INPUT           reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    OUTPUT          reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    CHANNEL         reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    BOOL            reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    STRING          reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    INT             reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    SEQ_BLOCK       reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    PAR_BLOCK       reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    $end            reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    RBRACE          reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .)
    ELSE            shift and go to state 99

  ! ELSE            [ reduce using rule 11 (stmt -> IF LPAREN condition RPAREN stmt .) ]


state 85

    (29) condition -> condition LE_THAN expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 29 (condition -> condition LE_THAN expr .)
    LE_THAN         reduce using rule 29 (condition -> condition LE_THAN expr .)
    GE_THAN         reduce using rule 29 (condition -> condition LE_THAN expr .)
    L_THAN          reduce using rule 29 (condition -> condition LE_THAN expr .)
    G_THAN          reduce using rule 29 (condition -> condition LE_THAN expr .)
    EQUAL           reduce using rule 29 (condition -> condition LE_THAN expr .)
    NOT_EQUAL       reduce using rule 29 (condition -> condition LE_THAN expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 86

    (30) condition -> condition GE_THAN expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 30 (condition -> condition GE_THAN expr .)
    LE_THAN         reduce using rule 30 (condition -> condition GE_THAN expr .)
    GE_THAN         reduce using rule 30 (condition -> condition GE_THAN expr .)
    L_THAN          reduce using rule 30 (condition -> condition GE_THAN expr .)
    G_THAN          reduce using rule 30 (condition -> condition GE_THAN expr .)
    EQUAL           reduce using rule 30 (condition -> condition GE_THAN expr .)
    NOT_EQUAL       reduce using rule 30 (condition -> condition GE_THAN expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 87

    (31) condition -> condition L_THAN expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 31 (condition -> condition L_THAN expr .)
    LE_THAN         reduce using rule 31 (condition -> condition L_THAN expr .)
    GE_THAN         reduce using rule 31 (condition -> condition L_THAN expr .)
    L_THAN          reduce using rule 31 (condition -> condition L_THAN expr .)
    G_THAN          reduce using rule 31 (condition -> condition L_THAN expr .)
    EQUAL           reduce using rule 31 (condition -> condition L_THAN expr .)
    NOT_EQUAL       reduce using rule 31 (condition -> condition L_THAN expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 88

    (32) condition -> condition G_THAN expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 32 (condition -> condition G_THAN expr .)
    LE_THAN         reduce using rule 32 (condition -> condition G_THAN expr .)
    GE_THAN         reduce using rule 32 (condition -> condition G_THAN expr .)
    L_THAN          reduce using rule 32 (condition -> condition G_THAN expr .)
    G_THAN          reduce using rule 32 (condition -> condition G_THAN expr .)
    EQUAL           reduce using rule 32 (condition -> condition G_THAN expr .)
    NOT_EQUAL       reduce using rule 32 (condition -> condition G_THAN expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 89

    (33) condition -> condition EQUAL expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 33 (condition -> condition EQUAL expr .)
    LE_THAN         reduce using rule 33 (condition -> condition EQUAL expr .)
    GE_THAN         reduce using rule 33 (condition -> condition EQUAL expr .)
    L_THAN          reduce using rule 33 (condition -> condition EQUAL expr .)
    G_THAN          reduce using rule 33 (condition -> condition EQUAL expr .)
    EQUAL           reduce using rule 33 (condition -> condition EQUAL expr .)
    NOT_EQUAL       reduce using rule 33 (condition -> condition EQUAL expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 90

    (34) condition -> condition NOT_EQUAL expr .
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    LE_THAN         reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    GE_THAN         reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    L_THAN          reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    G_THAN          reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    EQUAL           reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 34 (condition -> condition NOT_EQUAL expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 91

    (38) expr -> expr PLUS term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 38 (expr -> expr PLUS term .)
    MINUS           reduce using rule 38 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 38 (expr -> expr PLUS term .)
    LE_THAN         reduce using rule 38 (expr -> expr PLUS term .)
    GE_THAN         reduce using rule 38 (expr -> expr PLUS term .)
    L_THAN          reduce using rule 38 (expr -> expr PLUS term .)
    G_THAN          reduce using rule 38 (expr -> expr PLUS term .)
    EQUAL           reduce using rule 38 (expr -> expr PLUS term .)
    NOT_EQUAL       reduce using rule 38 (expr -> expr PLUS term .)
    IF              reduce using rule 38 (expr -> expr PLUS term .)
    WHILE           reduce using rule 38 (expr -> expr PLUS term .)
    LBRACE          reduce using rule 38 (expr -> expr PLUS term .)
    ID              reduce using rule 38 (expr -> expr PLUS term .)
    INPUT           reduce using rule 38 (expr -> expr PLUS term .)
    OUTPUT          reduce using rule 38 (expr -> expr PLUS term .)
    CHANNEL         reduce using rule 38 (expr -> expr PLUS term .)
    BOOL            reduce using rule 38 (expr -> expr PLUS term .)
    STRING          reduce using rule 38 (expr -> expr PLUS term .)
    INT             reduce using rule 38 (expr -> expr PLUS term .)
    SEQ_BLOCK       reduce using rule 38 (expr -> expr PLUS term .)
    PAR_BLOCK       reduce using rule 38 (expr -> expr PLUS term .)
    $end            reduce using rule 38 (expr -> expr PLUS term .)
    RBRACE          reduce using rule 38 (expr -> expr PLUS term .)
    ELSE            reduce using rule 38 (expr -> expr PLUS term .)
    COMMA           reduce using rule 38 (expr -> expr PLUS term .)
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75


state 92

    (39) expr -> expr MINUS term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 39 (expr -> expr MINUS term .)
    MINUS           reduce using rule 39 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 39 (expr -> expr MINUS term .)
    LE_THAN         reduce using rule 39 (expr -> expr MINUS term .)
    GE_THAN         reduce using rule 39 (expr -> expr MINUS term .)
    L_THAN          reduce using rule 39 (expr -> expr MINUS term .)
    G_THAN          reduce using rule 39 (expr -> expr MINUS term .)
    EQUAL           reduce using rule 39 (expr -> expr MINUS term .)
    NOT_EQUAL       reduce using rule 39 (expr -> expr MINUS term .)
    IF              reduce using rule 39 (expr -> expr MINUS term .)
    WHILE           reduce using rule 39 (expr -> expr MINUS term .)
    LBRACE          reduce using rule 39 (expr -> expr MINUS term .)
    ID              reduce using rule 39 (expr -> expr MINUS term .)
    INPUT           reduce using rule 39 (expr -> expr MINUS term .)
    OUTPUT          reduce using rule 39 (expr -> expr MINUS term .)
    CHANNEL         reduce using rule 39 (expr -> expr MINUS term .)
    BOOL            reduce using rule 39 (expr -> expr MINUS term .)
    STRING          reduce using rule 39 (expr -> expr MINUS term .)
    INT             reduce using rule 39 (expr -> expr MINUS term .)
    SEQ_BLOCK       reduce using rule 39 (expr -> expr MINUS term .)
    PAR_BLOCK       reduce using rule 39 (expr -> expr MINUS term .)
    $end            reduce using rule 39 (expr -> expr MINUS term .)
    RBRACE          reduce using rule 39 (expr -> expr MINUS term .)
    ELSE            reduce using rule 39 (expr -> expr MINUS term .)
    COMMA           reduce using rule 39 (expr -> expr MINUS term .)
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75


state 93

    (41) term -> term TIMES factor .

    TIMES           reduce using rule 41 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 41 (term -> term TIMES factor .)
    PLUS            reduce using rule 41 (term -> term TIMES factor .)
    MINUS           reduce using rule 41 (term -> term TIMES factor .)
    RPAREN          reduce using rule 41 (term -> term TIMES factor .)
    LE_THAN         reduce using rule 41 (term -> term TIMES factor .)
    GE_THAN         reduce using rule 41 (term -> term TIMES factor .)
    L_THAN          reduce using rule 41 (term -> term TIMES factor .)
    G_THAN          reduce using rule 41 (term -> term TIMES factor .)
    EQUAL           reduce using rule 41 (term -> term TIMES factor .)
    NOT_EQUAL       reduce using rule 41 (term -> term TIMES factor .)
    IF              reduce using rule 41 (term -> term TIMES factor .)
    WHILE           reduce using rule 41 (term -> term TIMES factor .)
    LBRACE          reduce using rule 41 (term -> term TIMES factor .)
    ID              reduce using rule 41 (term -> term TIMES factor .)
    INPUT           reduce using rule 41 (term -> term TIMES factor .)
    OUTPUT          reduce using rule 41 (term -> term TIMES factor .)
    CHANNEL         reduce using rule 41 (term -> term TIMES factor .)
    BOOL            reduce using rule 41 (term -> term TIMES factor .)
    STRING          reduce using rule 41 (term -> term TIMES factor .)
    INT             reduce using rule 41 (term -> term TIMES factor .)
    SEQ_BLOCK       reduce using rule 41 (term -> term TIMES factor .)
    PAR_BLOCK       reduce using rule 41 (term -> term TIMES factor .)
    $end            reduce using rule 41 (term -> term TIMES factor .)
    RBRACE          reduce using rule 41 (term -> term TIMES factor .)
    ELSE            reduce using rule 41 (term -> term TIMES factor .)
    COMMA           reduce using rule 41 (term -> term TIMES factor .)


state 94

    (42) term -> term DIVIDE factor .

    TIMES           reduce using rule 42 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 42 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 42 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 42 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 42 (term -> term DIVIDE factor .)
    LE_THAN         reduce using rule 42 (term -> term DIVIDE factor .)
    GE_THAN         reduce using rule 42 (term -> term DIVIDE factor .)
    L_THAN          reduce using rule 42 (term -> term DIVIDE factor .)
    G_THAN          reduce using rule 42 (term -> term DIVIDE factor .)
    EQUAL           reduce using rule 42 (term -> term DIVIDE factor .)
    NOT_EQUAL       reduce using rule 42 (term -> term DIVIDE factor .)
    IF              reduce using rule 42 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 42 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 42 (term -> term DIVIDE factor .)
    ID              reduce using rule 42 (term -> term DIVIDE factor .)
    INPUT           reduce using rule 42 (term -> term DIVIDE factor .)
    OUTPUT          reduce using rule 42 (term -> term DIVIDE factor .)
    CHANNEL         reduce using rule 42 (term -> term DIVIDE factor .)
    BOOL            reduce using rule 42 (term -> term DIVIDE factor .)
    STRING          reduce using rule 42 (term -> term DIVIDE factor .)
    INT             reduce using rule 42 (term -> term DIVIDE factor .)
    SEQ_BLOCK       reduce using rule 42 (term -> term DIVIDE factor .)
    PAR_BLOCK       reduce using rule 42 (term -> term DIVIDE factor .)
    $end            reduce using rule 42 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 42 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 42 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 42 (term -> term DIVIDE factor .)


state 95

    (13) stmt -> WHILE LPAREN condition RPAREN stmt .

    IF              reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    WHILE           reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    LBRACE          reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    ID              reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    INPUT           reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    OUTPUT          reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    CHANNEL         reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    BOOL            reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    STRING          reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    INT             reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    SEQ_BLOCK       reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    PAR_BLOCK       reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    $end            reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    RBRACE          reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)
    ELSE            reduce using rule 13 (stmt -> WHILE LPAREN condition RPAREN stmt .)


state 96

    (21) send_stmt -> SEND LPAREN expr . RPAREN
    (22) send_stmt -> SEND LPAREN expr . COMMA expr COMMA expr RPAREN
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 101
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 97

    (23) receive_stmt -> RECEIVE LPAREN ID . RPAREN
    (24) receive_stmt -> RECEIVE LPAREN ID . COMMA ID COMMA ID RPAREN

    RPAREN          shift and go to state 102
    COMMA           shift and go to state 103


state 98

    (52) c_channel -> CHANNEL ID LPAREN address COMMA . address RPAREN
    (53) address -> . ID
    (54) address -> . STRING_VALUE

    ID              shift and go to state 80
    STRING_VALUE    shift and go to state 82

    address                        shift and go to state 104

state 99

    (12) stmt -> IF LPAREN condition RPAREN stmt ELSE . stmt
    (9) stmt -> . assignment
    (10) stmt -> . declaration
    (11) stmt -> . IF LPAREN condition RPAREN stmt
    (12) stmt -> . IF LPAREN condition RPAREN stmt ELSE stmt
    (13) stmt -> . WHILE LPAREN condition RPAREN stmt
    (14) stmt -> . LBRACE stmts RBRACE
    (15) stmt -> . func
    (36) assignment -> . ID ASSIGN expr
    (37) assignment -> . ID ASSIGN func
    (25) declaration -> . c_channel
    (26) declaration -> . b_declaration
    (27) declaration -> . s_declaration
    (28) declaration -> . i_declaration
    (16) func -> . INPUT LPAREN RPAREN
    (17) func -> . OUTPUT LPAREN expr RPAREN
    (18) func -> . chan
    (52) c_channel -> . CHANNEL ID LPAREN address COMMA address RPAREN
    (55) b_declaration -> . BOOL ID
    (56) s_declaration -> . STRING ID
    (57) i_declaration -> . INT ID
    (19) chan -> . ID DOT send_stmt
    (20) chan -> . ID DOT receive_stmt

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    LBRACE          shift and go to state 14
    ID              shift and go to state 16
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 22
    CHANNEL         shift and go to state 24
    BOOL            shift and go to state 25
    STRING          shift and go to state 26
    INT             shift and go to state 27

    stmt                           shift and go to state 105
    assignment                     shift and go to state 10
    declaration                    shift and go to state 11
    func                           shift and go to state 15
    c_channel                      shift and go to state 17
    b_declaration                  shift and go to state 18
    s_declaration                  shift and go to state 19
    i_declaration                  shift and go to state 20
    chan                           shift and go to state 23

state 100

    (21) send_stmt -> SEND LPAREN expr RPAREN .

    IF              reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    WHILE           reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    LBRACE          reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    ID              reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    INPUT           reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    OUTPUT          reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    CHANNEL         reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    BOOL            reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    STRING          reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    INT             reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    SEQ_BLOCK       reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    PAR_BLOCK       reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    $end            reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    RBRACE          reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)
    ELSE            reduce using rule 21 (send_stmt -> SEND LPAREN expr RPAREN .)


state 101

    (22) send_stmt -> SEND LPAREN expr COMMA . expr COMMA expr RPAREN
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 106
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 102

    (23) receive_stmt -> RECEIVE LPAREN ID RPAREN .

    IF              reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    WHILE           reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    LBRACE          reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    ID              reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    INPUT           reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    OUTPUT          reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    CHANNEL         reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    BOOL            reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    STRING          reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    INT             reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    SEQ_BLOCK       reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    PAR_BLOCK       reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    $end            reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    RBRACE          reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)
    ELSE            reduce using rule 23 (receive_stmt -> RECEIVE LPAREN ID RPAREN .)


state 103

    (24) receive_stmt -> RECEIVE LPAREN ID COMMA . ID COMMA ID RPAREN

    ID              shift and go to state 107


state 104

    (52) c_channel -> CHANNEL ID LPAREN address COMMA address . RPAREN

    RPAREN          shift and go to state 108


state 105

    (12) stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .

    IF              reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    ID              reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    INPUT           reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    OUTPUT          reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    CHANNEL         reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    BOOL            reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    STRING          reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    INT             reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    SEQ_BLOCK       reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    PAR_BLOCK       reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    $end            reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    RBRACE          reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 12 (stmt -> IF LPAREN condition RPAREN stmt ELSE stmt .)


state 106

    (22) send_stmt -> SEND LPAREN expr COMMA expr . COMMA expr RPAREN
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    COMMA           shift and go to state 109
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 107

    (24) receive_stmt -> RECEIVE LPAREN ID COMMA ID . COMMA ID RPAREN

    COMMA           shift and go to state 110


state 108

    (52) c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .

    IF              reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    WHILE           reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    LBRACE          reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    ID              reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    INPUT           reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    OUTPUT          reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    CHANNEL         reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    BOOL            reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    STRING          reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    INT             reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    SEQ_BLOCK       reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    PAR_BLOCK       reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    $end            reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    RBRACE          reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)
    ELSE            reduce using rule 52 (c_channel -> CHANNEL ID LPAREN address COMMA address RPAREN .)


state 109

    (22) send_stmt -> SEND LPAREN expr COMMA expr COMMA . expr RPAREN
    (38) expr -> . expr PLUS term
    (39) expr -> . expr MINUS term
    (40) expr -> . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (44) factor -> . LPAREN expr RPAREN
    (45) factor -> . DIGIT
    (46) factor -> . ID
    (47) factor -> . STRING_VALUE
    (48) factor -> . bool_val
    (49) bool_val -> . TRUE
    (50) bool_val -> . FALSE

    LPAREN          shift and go to state 41
    DIGIT           shift and go to state 46
    ID              shift and go to state 47
    STRING_VALUE    shift and go to state 48
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expr                           shift and go to state 111
    term                           shift and go to state 44
    factor                         shift and go to state 45
    bool_val                       shift and go to state 49

state 110

    (24) receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA . ID RPAREN

    ID              shift and go to state 112


state 111

    (22) send_stmt -> SEND LPAREN expr COMMA expr COMMA expr . RPAREN
    (38) expr -> expr . PLUS term
    (39) expr -> expr . MINUS term

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 112

    (24) receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID . RPAREN

    RPAREN          shift and go to state 114


state 113

    (22) send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .

    IF              reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    WHILE           reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    LBRACE          reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    ID              reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    INPUT           reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    OUTPUT          reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    CHANNEL         reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    BOOL            reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    STRING          reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    INT             reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    SEQ_BLOCK       reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    PAR_BLOCK       reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    $end            reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    RBRACE          reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)
    ELSE            reduce using rule 22 (send_stmt -> SEND LPAREN expr COMMA expr COMMA expr RPAREN .)


state 114

    (24) receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .

    IF              reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    WHILE           reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    LBRACE          reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    ID              reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    INPUT           reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    OUTPUT          reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    CHANNEL         reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    BOOL            reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    STRING          reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    INT             reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    SEQ_BLOCK       reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    PAR_BLOCK       reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    $end            reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    RBRACE          reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)
    ELSE            reduce using rule 24 (receive_stmt -> RECEIVE LPAREN ID COMMA ID COMMA ID RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 84 resolved as shift
